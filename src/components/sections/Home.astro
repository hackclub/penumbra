---
import hackClubFlag from "../../assets/hackclub-flag.svg?raw";
---

<section class="bg-scroll-anchor">
  <div class="unmasked">
    <div class="fg">
      <div class="main-container">
        <div class="top">
          <div class="left">
            <div>
              <span class="anim-text">Make a shader.</span><br>
              <span class="anim-text">We'll ship you the poster.</span><br>
              <span class="anim-text">GPUs for the most dedicated.</span>
            </div>
          </div>

          <div class="right">
            <div>
              <span class="anim-text">STATUS: ACTIVE</span><br>
              <span class="anim-text">DEADLINE: 20 SEP 2025</span>
            </div>
          </div>
        </div>

        <div class="bottom" />
      </div>
    </div>
  </div>

  <div class="masked">
    <div class="fg">
      <div class="main-container">
        <div class="top"></div>

        <div class="bottom">
          <div class="left">
            <a class="hc-flag" href="https://hackclub.com">
              <Fragment set:html={hackClubFlag} />
            </a>

            <h1>PENUMBRA</h1>
          </div>

          <nav class="right">
            <ul>
              <li class="anim-text" data-goto="getting-started">GETTING STARTED</li>
              <li class="anim-text" data-goto="resources-and-guides">RESOURCES & GUIDES</li>
              <li class="anim-text" data-goto="submit">SUBMIT</li>
            </ul>
          </nav>
        </div>
      </div>
    </div>

    <pre class="bg" aria-hidden="true" is:raw>
      const float RAYMARCH_MIN_DIST = 0.3;
      const float RAYMARCH_MAX_DIST = 50.0;
      const float RAYMARCH_HIT_CUTOFF = 0.001;
      const int RAYMARCH_MAX_ITERS = 32;
      const float CAMERA_FOV = 0.3;
      const vec3 LIGHT_POS = vec3(-2.0, 2.0, -1.0);
      const float PI = 3.14159265358979323846;
      const float DEG2RAD = PI / 180.0;
      const float ANIM_SPEED = 1.0;
      float clamp01(float x) { return clamp(x, 0.0, 1.0); }
      vec3 clamp01(vec3 x) { return clamp(x, 0.0, 1.0); }
      vec3 rotateX(vec3 p, float a) {
        float c = cos(a), s = sin(a);    
        return vec3(p.x, c * p.y - s * p.z, s * p.y + c * p.z);    
      }
      vec3 rotateY(vec3 p, float a) {
        float c = cos(a), s = sin(a);    
        return vec3(c * p.x + s * p.z, p.y, -s * p.x + c * p.z);    
      }
    </pre>
  </div>
</section>

<style lang="scss"> 
  $text-glow-black: drop-shadow(0 0 21px rgba(0, 0, 0, 0.25));

  :root {
    --font-size-base: 2.5em;
    --font-size-logo: 2.75em;

    @media screen and (max-width: 1700px) {
      --font-size-base: 2em;
      --font-size-logo: 2.25em;
    }

    @media screen and (max-width: 1360px) {
      --font-size-base: 1.75em; 
      --font-size-logo: 2.00em;
    }

    @media screen and (max-width: 1190px) {
      --font-size-base: 1.5em;
      --font-size-logo: 1.75em;
    }

    @media screen and (max-width: 1020px) {
      --font-size-base: 1.25em;
      --font-size-logo: 1.50em;
    }
    
    @media screen and (max-width: 880px) {
      --font-size-base: 1.5em;
      --font-size-logo: 1.75em;
    }
  }

  section {
    width: 100%;
    height: 100%;
    mix-blend-mode: difference;

    > * {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
    }

    > .masked {
      mask-image: linear-gradient(white), url("/public/vectors/home-container-mask.svg");
      mask-repeat: no-repeat;
      mask-position: center;
      mask-size: 100vw;
      mask-composite: exclude;
    }

    > .unmasked {
      pointer-events: none;
    }
  }

  .fg, .bg {
    position: absolute;
    top: 0;
    right: 0;
    width: 100vw;
    height: 100vh;
    margin: 0;
    font-family: Nothing, monospace;
  }

  .fg {
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
  }

  .masked > .fg > .main-container {
    background: url("/public/vectors/home-container.svg");
    background-size: contain;
  }

  .hc-flag {
    display: inline-flex;
    max-width: fit-content;
    transition: transform .25s;
    transform-origin: center;
    transform: scale(1.00);

    > :global(svg) {
      width: min-content;
      height: calc(var(--font-size-logo) * 1.1);
    }

    &:hover { transform: scale(1.1); }
    &:active { transform: scale(0.9); }
  }

  .main-container {
    $size: 90vw;

    filter: drop-shadow(0 0 5px #fff);
    width: $size;
    height: ($size * (205 / 431));

    display: flex;
    flex-direction: column;

    $top-height: 69%; // yeah

    > * {
      width: 100%;
    }

    > .top, > .bottom {
      display: flex;
      justify-content: space-between;

      > * {
        width: 100%;
        height: 100%;
      }
    }

    > .top {
      flex-direction: column-reverse;
      height: $top-height;
      font-size: var(--font-size-base);
      padding: 0 3em;

      > * {
        display: flex;
        color: white;
      }

      > .left {
        align-items: flex-end;
        padding-bottom: 1em;
        padding-left: 2vw;
        mix-blend-mode: difference;
      }

      > .right {
        justify-content: flex-end;
        text-align: right;
        padding-top: 2em;
      }
    }

    > .bottom {
      height: 100% - $top-height;

      > .left {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 8px;
        padding: 2.75em 4em;
        filter: $text-glow-black;

        h1 {
          font-family: Kleemax, monospace; 
          font-size: var(--font-size-logo);
          margin: 0;
          color: #000;
        }
      }

      > .right {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        padding-top: 0.5em;
        padding-right: 2em;
        font-size: var(--font-size-base);

        ul {
          list-style-type: none;
          text-align: right;
          
          li {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            letter-spacing: -0.02em;
            user-select: none;
            padding: 0 .25em 0 2em;
            cursor: pointer;

            &:hover {
              background: black;
              color: white;

              &::after {
                filter: invert(1);
              }
            }

            &::after {
              content: "";
              width: .75em;
              height: .75em;
              display: inline-block;
              background: url("/public/vectors/link-arrow.svg") no-repeat;
              background-size: contain;
              margin: 4px;
              margin-left: 12px;
            }
          }
        }
      }
    }
  }

  .bg {
    $text-color: #c4210f;
    text-align: right;
    font-size: var(--font-size-base);
    padding: 1.5em;
    pointer-events: none;
    color: rgba($text-color, 0.25);
    filter: drop-shadow(0 0 5px rgba($text-color, 0.25));
  }

  @media screen and (max-width: 880px) {
    section {
      mix-blend-mode: normal;
    }

    .fg {
      padding: 2em 0;
    }

    .unmasked > .fg > .main-container {
      height: 100vh;

      .top {
        padding: 0 0.5em;

        .left {
          text-align: right;
          justify-content: flex-end;
        }
      }
    }

    .masked > .fg > .main-container {
      background: transparent;
      width: 100%;
      height: 100%;

      h1, nav {
        color: #fff !important;
      }

      .hc-flag {
        filter: invert(1);
      }

      .bottom {
        flex-direction: column;

        .left {
          padding: 0 3em;
        }

        .right {
          padding-top: 0;
        }

        .right {
          justify-content: flex-start;
          padding: .5em;
          padding-top: 0em;

          ul li {
            justify-content: flex-start;
            padding: 0;

            &::after {
              filter: invert(1);
            }
          }
        }
      }
    }
  }
</style>

<script>
  import { animateTyping } from "../../scripts/text-anim";

  const targets = document.querySelectorAll(".anim-text") as NodeListOf<HTMLElement>;
  for (const element of targets) {
    animateTyping(element, 3, 16);
  }

  for (const link of document.querySelectorAll<HTMLElement>("[data-goto]")) {
    link.addEventListener("click", () => {
      const anchor = document.getElementById(link.dataset.goto!);
      if (!anchor) {
        console.error(`No anchor element with ID ${link.dataset.goto} was found. Originating element:`, link);
        return;
      }

      anchor.scrollIntoView({ behavior: "smooth" });
      history.pushState(null, "", `#${link.dataset.goto}`);
    });
  }
</script>
